"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invoke = exports.flushCache = exports.getDebugInfo = void 0;
process.env.FORCE_COLOR = "0";
const nanolru_1 = __importDefault(require("nanolru"));
const path_1 = require("path");
const path_2 = __importDefault(require("path"));
const util_1 = require("util");
const fs_1 = __importDefault(require("fs"));
const stat = (0, util_1.promisify)(fs_1.default.stat);
const cacheParams = { max: 500, maxAge: 60000 };
const caches = {
    configCache: new nanolru_1.default(cacheParams),
    importCache: new nanolru_1.default(cacheParams),
    parentCache: new nanolru_1.default(cacheParams),
};
async function isDir(path) {
    try {
        const fsStat = await stat(path);
        return fsStat.isDirectory();
    }
    catch (e) {
        return false;
    }
}
async function findParent(start, search) {
    const cacheKey = `${start}|${search}`;
    const cachedValue = caches.parentCache.get(cacheKey);
    if (cachedValue === false) {
        return undefined;
    }
    if (cachedValue !== null) {
        return cachedValue;
    }
    const parent = path_2.default.join(start, "..");
    if (parent === start) {
        caches.parentCache.set(cacheKey, false);
        return undefined;
    }
    try {
        const candidate = path_2.default.join(parent, search);
        if (await isDir(candidate)) {
            caches.parentCache.set(cacheKey, candidate);
            return candidate;
        }
    }
    catch (e) { }
    return await findParent(parent, search);
}
async function pluginSearchDirs(cwd) {
    const result = [];
    const localNodeModules = await findParent(cwd, "node_modules");
    if (localNodeModules) {
        result.push(path_2.default.dirname(localNodeModules));
    }
    if (!process.env.PRETTIERD_LOCAL_PRETTIER_ONLY) {
        const parentNodeModules = await findParent(__dirname, "node_modules");
        if (parentNodeModules) {
            result.push(parentNodeModules);
        }
    }
    return result;
}
async function resolveConfigNoCache(prettier, filepath) {
    let config = await prettier.resolveConfig(filepath, {
        editorconfig: true,
        useCache: false,
    });
    if (!config && process.env.PRETTIERD_DEFAULT_CONFIG) {
        config = await prettier.resolveConfig((0, path_1.dirname)(process.env.PRETTIERD_DEFAULT_CONFIG), {
            config: process.env.PRETTIERD_DEFAULT_CONFIG,
            editorconfig: true,
            useCache: false,
        });
    }
    return { ...config, filepath };
}
async function resolveConfig(prettier, filepath) {
    const cachedValue = caches.configCache.get(filepath);
    if (cachedValue) {
        return cachedValue;
    }
    const config = await resolveConfigNoCache(prettier, filepath);
    caches.configCache.set(filepath, config);
    return config;
}
async function resolvePrettier(filePath) {
    const cachedValue = caches.importCache.get(filePath);
    if (cachedValue) {
        const [module, filePath] = cachedValue;
        return {
            module,
            filePath,
            cacheHit: true,
        };
    }
    if (cachedValue === false) {
        return undefined;
    }
    let path;
    try {
        path = require.resolve("prettier", { paths: [filePath] });
    }
    catch (e) {
        if (process.env.PRETTIERD_LOCAL_PRETTIER_ONLY) {
            caches.importCache.set(filePath, false);
            return undefined;
        }
        path = require.resolve("prettier");
    }
    return Promise.resolve().then(() => __importStar(require(path))).then((v) => {
        if (v !== undefined) {
            caches.importCache.set(filePath, [v, path]);
            return {
                module: v,
                filePath: path,
                cacheHit: false,
            };
        }
        caches.importCache.set(filePath, false);
        return undefined;
    });
}
function resolveFile(cwd, fileName) {
    if (path_2.default.isAbsolute(fileName)) {
        return fileName;
    }
    return path_2.default.join(cwd, fileName);
}
const defaultCLIArguments = {
    noColor: false,
    ignorePath: ".prettierignore",
};
function parseCLIArguments(args) {
    const parsedArguments = { ...defaultCLIArguments };
    let fileName = null;
    const argsIterator = args[Symbol.iterator]();
    for (const arg of argsIterator) {
        switch (arg) {
            case "--no-color":
                parsedArguments.noColor = true;
                break;
            case "--ignore-path": {
                const nextArg = argsIterator.next();
                if (nextArg.done) {
                    throw new Error("--ignore-path option expects a file path");
                }
                parsedArguments.ignorePath = nextArg.value;
                break;
            }
            default:
                // NOTE: positional arguments are assumed to be file paths
                if (fileName) {
                    throw new Error("Only a single file path is supported");
                }
                fileName = arg;
                break;
        }
    }
    if (!fileName) {
        throw new Error("File name must be provided as an argument");
    }
    return [parsedArguments, fileName];
}
async function run(cwd, args, text) {
    const [{ ignorePath }, fileName] = parseCLIArguments(args);
    const fullPath = resolveFile(cwd, fileName);
    const resolvedPrettier = await resolvePrettier(path_2.default.dirname(fullPath));
    if (!resolvedPrettier) {
        return text;
    }
    const { module: prettier } = resolvedPrettier;
    const { ignored } = await prettier.getFileInfo(fileName, { ignorePath });
    if (ignored) {
        return text;
    }
    const options = await resolveConfig(prettier, fullPath);
    return prettier.format(text, {
        ...options,
        pluginSearchDirs: await pluginSearchDirs(cwd),
    });
}
async function getDebugInfo(cwd, args) {
    const [_, fileName] = parseCLIArguments(args);
    const fullPath = resolveFile(cwd, fileName);
    const resolvedPrettier = await resolvePrettier(fullPath);
    const cacheInfo = Object.keys(caches).map((cacheName) => ({
        name: cacheName,
        length: caches[cacheName].length,
        keys: caches[cacheName].keys,
    }));
    return { resolvedPrettier, cacheInfo };
}
exports.getDebugInfo = getDebugInfo;
function flushCache() {
    for (const cacheName in caches) {
        caches[cacheName].clear();
    }
}
exports.flushCache = flushCache;
function invoke(cwd, args, text, cb) {
    run(cwd, args, text)
        .then((resp) => void cb(undefined, resp))
        .catch((error) => void cb(error));
}
exports.invoke = invoke;
